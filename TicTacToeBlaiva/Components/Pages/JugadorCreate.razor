@page "/Create"

@inject JugadoresService jugadoresService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Crear Jugador</PageTitle>
<EditForm Model="Jugador" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="container">
		<div class="card shadow-lg">
			<div class="card-header text-center">
				<h5 class="card-title">Crear Jugador</h5>
			</div>

			<div class="card-body">

				<div class="mb-3">
					<label class="form-label"><strong>PrestamoId</strong></label>
					<InputNumber class="form-control" @bind-Value="Jugador.JugadorId" readonly/>
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Nombres</strong></label>
					<InputText class="form-control" @bind-Value="Jugador.Nombres" />
					<ValidationMessage For="@(() => Jugador.Nombres)" />
				</div>

				<div class="mb-3">
					<label class="form-label"><strong>Partidas</strong></label>
					<InputNumber class="form-control" @bind-Value="Jugador.Partidas" />
					<ValidationMessage For="@(() => Jugador.Partidas)" />
				</div>
			</div>

			<div class="card-footer text-center mt-2">
				<a href="/" class="btn btn-secondary">Cancelar</a>
				<button type="submit" class="btn btn-primary">Guardar</button>
			</div>
		</div>
	</div>
</EditForm>

@code {
	public Jugadores Jugador { get; set; } = new Jugadores();
	public List<Jugadores> ListaJugadores { get; set; } = new List<Jugadores>();

	protected override async Task OnInitializedAsync()
	{
		ListaJugadores = await jugadoresService.Listar(criterio: j => j.JugadorId > 0);
	}

	public async Task Guardar()
	{
		var creado = await jugadoresService.Guardar(Jugador);
		if (creado)
		{
			navigationManager.NavigateTo("/");
		}
		else
		{
			
		}
	}
}
